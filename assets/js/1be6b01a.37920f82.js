"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[3377],{5318:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7378);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,m=c["".concat(l,".").concat(u)]||c[u]||y[u]||r;return t?a.createElement(m,s(s({ref:n},d),{},{components:t})):a.createElement(m,s({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(5773),o=(t(7378),t(5318));const r={title:"TypeScript",sidebar_position:65},s=void 0,i={unversionedId:"typescript",id:"typescript",title:"TypeScript",description:"Graphile Worker is written in TypeScript. By default, for safety, payloads are",source:"@site/docs/typescript.md",sourceDirName:".",slug:"/typescript",permalink:"/docs/typescript",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/typescript.md",tags:[],version:"current",sidebarPosition:65,frontMatter:{title:"TypeScript",sidebar_position:65},sidebar:"tutorialSidebar",previous:{title:"Database schema",permalink:"/docs/schema"},next:{title:"Adding jobs through SQL",permalink:"/docs/sql-add-job"}},l={},p=[{value:"Using type assertion functions",id:"using-type-assertion-functions",level:2},{value:"Example of using an assertion function",id:"example-of-using-an-assertion-function",level:3},{value:"Assuming type via <code>GraphileWorker.Tasks</code>",id:"assuming-type-via-graphileworkertasks",level:2},{value:"Example of assuming type",id:"example-of-assuming-type",level:3}],d={toc:p},c="wrapper";function y(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Graphile Worker is written in TypeScript. By default, for safety, ",(0,o.kt)("inlineCode",{parentName:"p"},"payload"),"s are\ntyped as ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown")," since they may have been populated by out of date code, or\neven from other sources. This requires you to add a type guard or similar to\nensure the ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," conforms to what you expect. It can be convenient to\ndeclare the payload types up front to avoid this ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown"),", but doing so might\nbe unsafe ","\u2014"," please be sure to read the caveats below."),(0,o.kt)("h2",{id:"using-type-assertion-functions"},"Using type assertion functions"),(0,o.kt)("p",null,"To ensure your system is as safe as possible (and guard against old jobs, or\njobs specified outside of TypeScript's type checking) we recommend that you use\n",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions"},"type assertion functions"),"\nto assert that your payload is of the expected type."),(0,o.kt)("p",null,"If this is too manual, you might prefer to use a library such as ",(0,o.kt)("inlineCode",{parentName:"p"},"runtypes")," or\none of the many others of a similar kind."),(0,o.kt)("h3",{id:"example-of-using-an-assertion-function"},"Example of using an assertion function"),(0,o.kt)("p",null,"The following is an example implementation of sending emails using Amazon SES."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Task, WorkerUtils } from "graphile-worker";\nimport { ses } from "./aws";\n\ninterface Payload {\n  to: string;\n  subject: string;\n  body: string;\n}\n\nfunction assertPayload(payload: any): asserts payload is Payload {\n  if (typeof payload !== "object" || !payload) throw new Error("invalid");\n  if (typeof payload.to !== "string") throw new Error("invalid");\n  if (typeof payload.subject !== "string") throw new Error("invalid");\n  if (typeof payload.body !== "string") throw new Error("invalid");\n}\n\nexport const send_email: Task = async function (payload) {\n  assertPayload(payload);\n  const { to, subject, body } = payload;\n  await ses.sendEmail({\n    Destination: {\n      ToAddresses: [to],\n      FromAddresses: ["no-reply@example.com"],\n    },\n    Message: {\n      Subject: {\n        Charset: "UTF-8",\n        Data: subject,\n      },\n      Body: {\n        Text: {\n          Charset: "UTF-8",\n          Data: body,\n        },\n      },\n    },\n  });\n};\n')),(0,o.kt)("p",null,"If now we introduce a new functionality to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," address, we have to\ntake into account that older jobs will not have the ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," address set. We\nshould adjust our code like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'import type { Task, WorkerUtils } from "graphile-worker";\nimport { ses } from "./aws";\n\ninterface Payload {\n  to: string;\n  subject: string;\n  body: string;\n+ from?: string;\n}\n\nfunction assertPayload(payload: any): asserts payload is Payload {\n  if (typeof payload !== "object" || !payload) throw new Error("invalid");\n  if (typeof payload.to !== "string") throw new Error("invalid");\n  if (typeof payload.subject !== "string") throw new Error("invalid");\n  if (typeof payload.body !== "string") throw new Error("invalid");\n+ if (typeof payload.from !== "string" && typeof payload.from !== "undefined")\n+   throw new Error("invalid");\n}\n\nexport const send_email: Task = async function (payload) {\n  assertPayload(payload);\n- const { to, subject, body } = payload;\n+ const { to, subject, body, from } = payload;\n  await ses.sendEmail({\n    Destination: {\n      ToAddresses: [to],\n-     FromAddresses: ["no-reply@example.com"],\n+     FromAddresses: [from ?? "no-reply@example.com"],\n    },\n    Message: {\n      Subject: {\n        Charset: "UTF-8",\n        Data: subject,\n      },\n      Body: {\n        Text: {\n          Charset: "UTF-8",\n          Data: body,\n        },\n      },\n    },\n  });\n};\n')),(0,o.kt)("h2",{id:"assuming-type-via-graphileworkertasks"},"Assuming type via ",(0,o.kt)("inlineCode",{parentName:"h2"},"GraphileWorker.Tasks")),(0,o.kt)("p",null,"As an alternative to the recommended use of assertion functions, you can\nregister types for Graphile Worker tasks using the following syntax in a shared\nTypeScript file in your project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'declare global {\n  namespace GraphileWorker {\n    interface Tasks {\n      // <name>: <payload type>; e.g.:\n      myTaskIdentifier: { details: "are"; specified: "here" };\n    }\n  }\n}\n')),(0,o.kt)("p",null,"This should then enable auto-complete and payload type safety for ",(0,o.kt)("inlineCode",{parentName:"p"},"addJob")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"quickAddJob"),", and should also allow the payloads of your task functions to be\ninferred when defined like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const task: Task<"myTaskIdentifier"> = async (payload, helpers) => {\n  const { details, specified } = payload;\n  /* ... */\n};\n')),(0,o.kt)("p",null,"or like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const tasks: TaskList = {\n  async myTaskIdentifier(payload, helpers) {\n    const { details, specified } = payload;\n    /* ... */\n  },\n};\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Using TypeScript types like this can be misleading. Graphile Worker jobs can be\ncreated in the database directly via the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphile_worker.add_job()")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},".add_jobs()")," APIs; and these APIs cannot check that the payloads added conform\nto your TypeScript types. Further, you may modify the payload type of a task in\na later version of your application, but existing jobs may exist in the database\nusing the old format. This can lead to you assuming that something is a number\nwhen actually it","'","s ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", resulting in more bugs in your code, so care\nmust be taken."),(0,o.kt)("p",{parentName:"admonition"},"We recommend you use assertion functions instead.")),(0,o.kt)("h3",{id:"example-of-assuming-type"},"Example of assuming type"),(0,o.kt)("p",null,"The following takes the Amazon SES example above, but uses the technique of\nassuming type instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Task, WorkerUtils } from "graphile-worker";\nimport { ses } from "./aws";\n\ndeclare global {\n  namespace GraphileWorker {\n    interface Tasks {\n      send_email: {\n        to: string;\n        subject: string;\n        body: string;\n      };\n    }\n  }\n}\n\nexport const send_email: Task<"send_email"> = async function (payload) {\n  const { to, subject, body } = payload;\n  await ses.sendEmail({\n    Destination: {\n      ToAddresses: [to],\n      FromAddresses: ["no-reply@example.com"],\n    },\n    Message: {\n      Subject: {\n        Charset: "UTF-8",\n        Data: subject,\n      },\n      Body: {\n        Text: {\n          Charset: "UTF-8",\n          Data: body,\n        },\n      },\n    },\n  });\n};\n')),(0,o.kt)("p",null,"If now we introduce the new functionality to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," address, the changes\nwe make have to take into account that older jobs may not have the ",(0,o.kt)("inlineCode",{parentName:"p"},"from"),"\naddress set, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'import type { Task, WorkerUtils } from "graphile-worker";\nimport { ses } from "./aws";\n\ndeclare global {\n  namespace GraphileWorker {\n    interface Tasks {\n      send_email: {\n        to: string;\n        subject: string;\n        body: string;\n+       from?: string;\n      };\n    }\n  }\n}\n\nexport const send_email: Task<"send_email"> = async function (payload) {\n- const { to, subject, body } = payload;\n+ const { to, subject, body, from } = payload;\n  await ses.sendEmail({\n    Destination: {\n      ToAddresses: [to],\n-      FromAddresses: ["no-reply@example.com"],\n+      FromAddresses: [from ?? "no-reply@example.com"],\n    },\n    Message: {\n      Subject: {\n        Charset: "UTF-8",\n        Data: subject,\n      },\n      Body: {\n        Text: {\n          Charset: "UTF-8",\n          Data: body,\n        },\n      },\n    },\n  });\n};\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"All of the declarations would normally be put in a shared interface file, or\nsimilar. The example above defines one with the task for ease of reading.")))}y.isMDXComponent=!0}}]);